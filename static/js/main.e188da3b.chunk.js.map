{"version":3,"sources":["components/ChorusCard/ChorusCard.tsx","components/ConnectButton/ConnectButton.tsx","components/PlayButton/PlayButton.tsx","components/Page/Page.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectButton","props","react_default","a","createElement","className","buttonPressed","onClick","connect","connected","play","playingAudio","Page","state","temperature","player","filter","chorus","_callee","thingy","regenerator_default","wrap","_context","prev","next","_this","Thingy","logEnabled","window","sent","addEventListener","toggleChorus","button","start","setState","console","log","disconnect","detail","value","stop","data","wet","this","Tone","Chorus","toMaster","Filter","Player","loop","components_ConnectButton_ConnectButton","PlayButton","ChorusCard","React","Component","Boolean","location","hostname","match","ReactDOM","render","components_Page_Page","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e188da3b.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface IProps {\n  buttonPressed: boolean;\n}\n\nconst ConnectButton: React.FunctionComponent<IProps> = (props) => {\n  return (\n    <div className=\"card\">\n      <p>press the button</p>\n      {props.buttonPressed ? (\n        <p>chorus is <span className=\"on\">on</span></p>\n      ) : (\n        <p>chorus is <span className=\"off\">off</span></p>\n      )}\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React from \"react\";\n\ninterface IProps {\n  connected: boolean;\n  connect(): void;\n}\n\nconst ConnectButton: React.FunctionComponent<IProps> = (props) => {\n  return (\n    <div className=\"buttondiv\">\n      <button className=\"connectbutton\" onClick={props.connect}>\n        {props.connected ? (\n          \"disconnect\"\n        ) : (\n          \"connect\"\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React from \"react\";\n\ninterface IProps {\n  playingAudio: boolean;\n  play(): void;\n}\n\nconst ConnectButton: React.FunctionComponent<IProps> = (props) => {\n  return (\n    <div className=\"buttondiv\">\n      <button className=\"playbutton\" onClick={props.play}>\n        {props.playingAudio ? (\n          \"stop\"\n        ) : (\n          \"play\"\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React from \"react\";\nimport Thingy from \"thingy52_web_bluetooth\";\nimport Tone from \"tone\";\nimport ChorusCard from \"../ChorusCard/ChorusCard\";\nimport ConnectButton from \"../ConnectButton/ConnectButton\";\nimport PlayButton from \"../PlayButton/PlayButton\";\nimport \"./Page.css\";\n\ninterface IState {\n  buttonPressed: boolean;\n  connected: boolean;\n  playingAudio: boolean;\n  temperature: number;\n}\n\nclass Page extends React.Component<{}, IState> {\n  public state: IState = {\n    buttonPressed: false,\n    connected: false,\n    playingAudio: false,\n    temperature: -1,\n  };\n  private player!: Tone.Player;\n  private filter!: Tone.Filter;\n  private chorus!: Tone.Chorus;\n\n  public componentDidMount() {\n    this.chorus = new Tone.Chorus(2, 2.5, 0.5);\n    this.chorus.wet.value = 0;\n    this.chorus.toMaster();\n    this.filter = new Tone.Filter(3000, \"lowpass\");\n    this.filter.toMaster();\n    this.player = new Tone.Player(\"./song.mp3\");\n    this.player.loop = true;\n    this.player.connect(this.chorus);\n  }\n\n  public connect = async () => {\n    if (!this.state.connected) {\n      const thingy = new Thingy({logEnabled: false});\n      (window as any).thingy = thingy;\n      const connected = await (window as any).thingy.connect();\n      if (connected) {\n        (window as any).thingy.addEventListener(\"button\", this.toggleChorus);\n        await (window as any).thingy.button.start();\n        this.setState({\n          connected: true,\n        });\n      } else {\n        console.log(\"web bluetooth not supported\");\n      }\n    } else {\n      await (window as any).thingy.disconnect();\n      this.toggleChorus({detail: {value: 0}});\n      this.setState({\n        buttonPressed: false,\n        connected: false,\n      });\n    }\n  }\n\n  public play = () => {\n    if (this.state.playingAudio === false) {\n      this.player.start();\n    } else {\n      this.player.stop();\n    }\n    this.setState({\n      playingAudio: (!this.state.playingAudio),\n    });\n  }\n\n  public toggleChorus = (data: {detail: {value: number}}) => {\n    // can do gravity with filter?\n    if (data.detail.value === 1) {\n      this.chorus.wet.value = 1;\n      this.setState({buttonPressed: true});\n    } else {\n      this.chorus.wet.value = 0;\n      this.setState({buttonPressed: false});\n    }\n  }\n\n  public render() {\n    return (\n    <div className=\"page\">\n      <h1>thingy audio controller</h1>\n      <ConnectButton connect={this.connect} connected={this.state.connected}/>\n      <PlayButton play={this.play} playingAudio={this.state.playingAudio}/>\n      <ChorusCard buttonPressed={this.state.buttonPressed}/>\n    </div>\n  );\n  }\n\n  public getChorus() {\n    return this.chorus;\n  }\n}\n\nexport default Page;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Page from \"./components/Page/Page\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Page />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}